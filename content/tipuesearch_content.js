var tipuesearch = {"pages": [{'title': 'About', 'text': 'Mechatronic Product Design: \n 2019.02  Collaborative design process and product knowledge methodology for mechatronic systems \n 2021.01  A process for designing innovative mechatronic products \n 2023.10  A review of digital twin technology for electromechanical products: Evolution focus throughout key lifecycle phases \n mechatronic_product_collaborative_design_papers_for_cd2024.7z  (for @nfu users only) \n \n https://github.com/Introduction-to-Autonomous-Robots/Introduction-to-Autonomous-Robots \n https://pyslvs.github.io/ \xa0 \n Webots_cd2024.7z  (338 MB, 需要下載密碼) \n https://cyberbotics.com/doc/reference/index \xa0 \n Making Images with Mathematics \n CoppeliaSim 4.5.1 rev1 for IPv6.7z  (169MB, 需要下載密碼) \n References: \n https://www.youtube.com/@JBVCreative/playlists \n Ball return system for the basketball shooting robot', 'tags': '', 'url': 'About.html'}, {'title': 'Control', 'text': 'https://github.com/topics/mouse-controller   \n https://github.com/mdecycu/VisualMouse', 'tags': '', 'url': 'Control.html'}, {'title': 'cmsimde', 'text': '', 'tags': '', 'url': 'cmsimde.html'}, {'title': 'ubuntu', 'text': '使用 cmsimde 作為網際內容管理系統的倉儲, 在 Ubuntu 伺服器中進行協同, 由於是自建主機因此可用性與 localhost 相同, 斷線機率取決於工作站室中虛擬主機的網路與電力供應是否穩定: \n 1. 利用 " sudo update-rc.d stunnel4 defaults " 將 s.cycu.org 中的 stunnel4 設為與系統同步啟動. \n 2. 當 server.py 已經啟動, 使用者登入後可以利用以下指令, 列出各使用者啟動網頁編輯所對應的 PID (Process ID): \n ps -axo pid,comm,uname | grep "python3" \n 各用戶若希望刪除已經啟動的 Process, 可以找到所啟動的 PID 後, 以下列指令關閉服務 (若 PID = 1234): \n kill 1234 \n 其中, 系統管理者可以刪除所有 Processes, 而各用戶只能刪除各自所啟動的 Process. \n 3. 假如自己所分派到的網路 port 遭到占用, 可以利用下列指令查出使用該埠號的使用者帳號: \n 例如要查詢埠號 9210 埠號的使用情形, 指令為\xa0 lsof -i :9210, 其中 ls 為 list, of 為 open file, -i 中的 i 為 internet, :9210 表示要求列出與 port 9210 有關 internet 使用相關的資料. \n', 'tags': '', 'url': 'ubuntu.html'}, {'title': 'Replit', 'text': 'Replit 與 Github Pages 的結合是目前在多人協同架構下, 最方便的網際內容管理方式, 但若 repl.co 停用且部署僅提供付費用戶使用, 利用 cmsimde 作為網際內容管理的用戶, 該如何在 Replit 平台上進行協同設計? \n 使用下列 PyQt5 程式就能自帶瀏覽器開啟 cmsimde 內部啟動的編輯網站  https://localhost:9445 \n browser.py \n import sys\n\n\nfrom PyQt5.QtCore import QUrl\nfrom PyQt5.QtWidgets import QApplication\n\n\nfrom PyQt5.QtWebEngineWidgets import QWebEnginePage, QWebEngineView\n\n\nclass WebEnginePage(QWebEnginePage):\n    def certificateError(self, error):\n        error.ignoreCertificateError()\n        return True\n\n\ndef main(args):\n    app = QApplication(args)\n    webview = QWebEngineView()\n    page = WebEnginePage()\n    webview.setPage(page)\n    webview.load(QUrl("https://localhost:9445"))\n    webview.show()\n    sys.exit(app.exec_())\n\n\nif __name__ == "__main__":\n    main(sys.argv) \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Projects', 'text': '鋼球永動模擬系統: \n \n \n 鋼球平衡台: \n \n \n \n 協同專案: \n https://github.com/mdecycu/pj40922  (有限元素法在四足機器人設計上的應用) \n \n https://github.com/Xgorobot/Autonomous-Xgo-Dog-Robot-Controller \n https://github.com/Xgorobot/RaspberryPi-CM4 \n https://www.xgorobot.com/ \n \n https://downloadfree3d.com/3d-models/electronics/robot-electronics/xgo-robot/ \n xgo-roboy.zip  (需要下載密碼) \n https://www.elecfreaks.com/elecfreaks-xgo-robot-dog-kit-v2-for-micro-bit.html \n https://wiki.elecfreaks.com/en/microbit/robot/xgo-robot-kit-v2/ \n \n', 'tags': '', 'url': 'Projects.html'}, {'title': 'Football', 'text': 'https://github.com/mdecd2023/2a3-pj3ag4 \n https://mdecd2023.github.io/2a3-pj3ag4   \n cd2023_pj3ag4_zmq_football4.7z  (需要下載密碼)', 'tags': '', 'url': 'Football.html'}, {'title': 'Basketball', 'text': '\n', 'tags': '', 'url': 'Basketball.html'}, {'title': 'Golf', 'text': '', 'tags': '', 'url': 'Golf.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};